{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction fastABF is a fast and robust computation module for activity based funding ( ABF ). It helps to streamline the computation of ABF activities as per the National Efficient Price ( NEP ) 20-21 framework guidelines. It covers the following major ABF activity types admitted acute admitted sub/non-acute non-admitted emergency department or emergency service Features Fast to setup - go from start to computing an example ABF episode within 5 minutes. Save close to a month of development and testing time! Robust - with python type hints, strong version control (via Poetry) and strong test coverage the code base is ready for use in backend systems. Easy to understand and extend - numerous comments and well structured organisation, ensure that health IT developers can easily use and extend these modules. Pain free - The code aims to implement the IHPA NEP 20-21 computation documentation and guidelines that span over 60 pages ( in addition, the HAC computation guidelines span >40 pages ). The effort we have put into this is time that you can spend on making other innovative contributions (or taking several long walks). Lower bug count - By leveraging a well tested and open source code base - developers can reduce the chance of introducing bugs into their ABF calculations by over 25-30% 1 Incorporates METeOR conventions - The METeOR identifiers have been mapped to user friendly Python Enum names. Now instead of remembering the METeOR numerical identifiers you can use these human readable class names - reducing the possibility of bugs and errors creeping in. HAC adjustment computations - The detailed steps of the HAC adjustments are included as well. Remoteness calculations - This code also contains the steps to obtain the remoteness values (from postcode and SA2 address). Hence it enables automatic extraction of the RA16 remoteness class) Note It is assumed that you are familiar with python at atleast a basic level. the terminology and concepts of ABF . You can follow along in the quick start example via a code editor, python commandline or a jupyter notebook Quick-start Lets see how you can get started using fastABF in under 5 minutes! > pip install fastabf That installs fastabf. Now we get on with using it. Open up a python shell or notebook and type in the following (or copy-paste it from the box below) import fastabf from fastabf.datatypes import ( ABF_Service_Category , Care_Type , Remoteness_Category_RA16 ) from fastabf.pipelines.nwau_admitted_acute import Admitted_Acute_Record aar = fastabf . Admitted_Acute_Record ( Birth_Date = \"23/12/1990\" , Admission_Date = \"25/09/2020\" , Separation_Date = \"30/09/2020\" , AR_DRG_v10 = \"H07B\" , care_type = fastabf . Care_Type . acute_care_admitted_care , Pat_Postcode = \"PC00\" , ICU_hours_L3 = 0 , bool_transfer_status = False , sex = 2 , bool_is_emergency_admission = False , bool_foetal_distress_flag = False , bool_instrument_use_flag = False , bool_ppop_flag = False , bool_prima_flag = False , HAC1 = False , HAC2 = True , HAC3 = False , HAC4 = False , HAC6 = False , HAC7 = False , HAC8 = False , HAC9 = False , HAC10 = False , HAC11 = False , HAC12 = False , HAC13 = False , HAC14 = False , HAC15p2 = False , Charlson_Score = 0 , Pat_private_Flag = False , EST_Remoteness_Cat = Remoteness_Category_RA16 . Inner_Regional ) abf_price = aar . get_abf_price () Nicely done! In just 5 minutes you have computed the ABF price for an admitted acute episode that included various hospital acquired complication flags, location adjustments etc. This required over 20 steps behind the scenes. The power of using this toolbox is that all of them were orchestrated for you. Important Before using this in production please note that there are a few values that are unique to each hospital and must be set accordingly. They affect the price computations but would not need to be changed very often. Refer to the global variables section regarding this. Licensing This project is licensed under the open source terms of the AGPLv3.0 license. Note For healthcare providers and IT departments who need a proprietary license please contact the Greenlake Medical team for more information. based on the experience of the internal dev-team and bugs caught and resolved via type checking and testing during development. \u21a9","title":"fastABF"},{"location":"#introduction","text":"fastABF is a fast and robust computation module for activity based funding ( ABF ). It helps to streamline the computation of ABF activities as per the National Efficient Price ( NEP ) 20-21 framework guidelines. It covers the following major ABF activity types admitted acute admitted sub/non-acute non-admitted emergency department or emergency service","title":"Introduction"},{"location":"#features","text":"Fast to setup - go from start to computing an example ABF episode within 5 minutes. Save close to a month of development and testing time! Robust - with python type hints, strong version control (via Poetry) and strong test coverage the code base is ready for use in backend systems. Easy to understand and extend - numerous comments and well structured organisation, ensure that health IT developers can easily use and extend these modules. Pain free - The code aims to implement the IHPA NEP 20-21 computation documentation and guidelines that span over 60 pages ( in addition, the HAC computation guidelines span >40 pages ). The effort we have put into this is time that you can spend on making other innovative contributions (or taking several long walks). Lower bug count - By leveraging a well tested and open source code base - developers can reduce the chance of introducing bugs into their ABF calculations by over 25-30% 1 Incorporates METeOR conventions - The METeOR identifiers have been mapped to user friendly Python Enum names. Now instead of remembering the METeOR numerical identifiers you can use these human readable class names - reducing the possibility of bugs and errors creeping in. HAC adjustment computations - The detailed steps of the HAC adjustments are included as well. Remoteness calculations - This code also contains the steps to obtain the remoteness values (from postcode and SA2 address). Hence it enables automatic extraction of the RA16 remoteness class) Note It is assumed that you are familiar with python at atleast a basic level. the terminology and concepts of ABF . You can follow along in the quick start example via a code editor, python commandline or a jupyter notebook","title":"Features"},{"location":"#quick-start","text":"Lets see how you can get started using fastABF in under 5 minutes! > pip install fastabf That installs fastabf. Now we get on with using it. Open up a python shell or notebook and type in the following (or copy-paste it from the box below) import fastabf from fastabf.datatypes import ( ABF_Service_Category , Care_Type , Remoteness_Category_RA16 ) from fastabf.pipelines.nwau_admitted_acute import Admitted_Acute_Record aar = fastabf . Admitted_Acute_Record ( Birth_Date = \"23/12/1990\" , Admission_Date = \"25/09/2020\" , Separation_Date = \"30/09/2020\" , AR_DRG_v10 = \"H07B\" , care_type = fastabf . Care_Type . acute_care_admitted_care , Pat_Postcode = \"PC00\" , ICU_hours_L3 = 0 , bool_transfer_status = False , sex = 2 , bool_is_emergency_admission = False , bool_foetal_distress_flag = False , bool_instrument_use_flag = False , bool_ppop_flag = False , bool_prima_flag = False , HAC1 = False , HAC2 = True , HAC3 = False , HAC4 = False , HAC6 = False , HAC7 = False , HAC8 = False , HAC9 = False , HAC10 = False , HAC11 = False , HAC12 = False , HAC13 = False , HAC14 = False , HAC15p2 = False , Charlson_Score = 0 , Pat_private_Flag = False , EST_Remoteness_Cat = Remoteness_Category_RA16 . Inner_Regional ) abf_price = aar . get_abf_price () Nicely done! In just 5 minutes you have computed the ABF price for an admitted acute episode that included various hospital acquired complication flags, location adjustments etc. This required over 20 steps behind the scenes. The power of using this toolbox is that all of them were orchestrated for you. Important Before using this in production please note that there are a few values that are unique to each hospital and must be set accordingly. They affect the price computations but would not need to be changed very often. Refer to the global variables section regarding this.","title":"Quick-start"},{"location":"#licensing","text":"This project is licensed under the open source terms of the AGPLv3.0 license. Note For healthcare providers and IT departments who need a proprietary license please contact the Greenlake Medical team for more information. based on the experience of the internal dev-team and bugs caught and resolved via type checking and testing during development. \u21a9","title":"Licensing"},{"location":"contributors/","text":"Contributors We welcome contributors and pull requests to this library. There's plenty to do ranging from documentation, increasing test coverage, adding new features and tests. Info This section is under development. Your eagerness is appreciated. Hence, while we add more details here, you should stop by on gitter to say hi to the developers and discuss your ideas/requirements/complaints with us to help you get started. We are a friendly bunch and are happy to have new developers contribute to this library.","title":"Contributors"},{"location":"contributors/#contributors","text":"We welcome contributors and pull requests to this library. There's plenty to do ranging from documentation, increasing test coverage, adding new features and tests. Info This section is under development. Your eagerness is appreciated. Hence, while we add more details here, you should stop by on gitter to say hi to the developers and discuss your ideas/requirements/complaints with us to help you get started. We are a friendly bunch and are happy to have new developers contribute to this library.","title":"Contributors"},{"location":"detailedintro/","text":"Detailed overview This page describes the parameters for the cases that are of primary interest to developers who want to start using fastABF. Note Readers who wish to contribute and extend this library should read this section as well as the section for library developers & contributors. Typical workflow Normally users would like to calculate the ABF prices for episodes. In fastABF this is easily done by gathering various pieces of data required to invoke the corresponding pipeline for each of the ABF cases. In order to know which pieces of data are required and to construct them easily - here is a simple overview of the inputs for each of the four cases Admitted acute ABF Parameters required class Admitted_Acute_Record : Birth_Date : str , # ddmmyy Admission_Date : str , # ddmmyy Separation_Date : str , # ddmmyy AR_DRG_v10 : str , # [METeOR id: 269976] True if admitted patient transferred from another hospital. bool_transfer_status : bool , sex : int , # [METeOR id: 635126] # [METeOR id: 269986] True if admission occurred on an emergency basis bool_is_emergency_admission : bool , bool_foetal_distress_flag : bool , bool_instrument_use_flag : bool , bool_ppop_flag : bool , bool_prima_flag : bool , HAC1 : bool , HAC2 : bool , HAC3 : bool , HAC4 : bool , HAC6 : bool , HAC7 : bool , HAC8 : bool , HAC9 : bool , HAC10 : bool , HAC11 : bool , HAC12 : bool , HAC13 : bool , HAC14 : bool , HAC15p2 : bool , Charlson_Score : int , patient_leave_days : float = 0 , ICU_hours_L3 : float = - 1 , ICU_hours_other : float = 0 , Psych_Days : float = 0 , # METeOR id: 552375 Pat_Postcode : str = \"\" , # Format PCNNNN, METeOR id: 429894 Pat_SA2 : int = 0 , # NNNNNNNNN (9 digit), METeOR id: 469909 # Establishment's Remoteness Category EST_Remoteness_Cat : Remoteness_Category_RA16 = Remoteness_Category_RA16 . Unknown , Indigenous_Status : Indigenous_Status_Category = \\ Indigenous_Status_Category . Unknown_or_not_stated , Pat_Radiotherapy_Flag : bool = False , # Set to True if the patient has any of the ACHI 11th Edition codes # listed in Appendices B and C of the `national efficient # price determination 2020-21` document for radiotherapy relevant codes # else False Pat_Dialysis_Flag : bool = False , # Set to True if the patient has any of the ACHI 11th Edition codes # listed in Appendices B and C of the `national efficient # price determination 2020-21` document for dialysis relevant codes # else False # Set to True if the patient is an eligible private patient Pat_private_Flag : bool = False , Pat_Covid19_Flag : bool = False , care_type : Care_Type = Care_Type . acute_care_admitted_care Admitted subacute ABF Parameters required class Admitted_Subacute_Record : Birth_Date : str , # mmddyy Admission_Date : str , Separation_Date : str , AN_SNAP_v4 : str , # [METeOR id: 269976] True if admitted patient transferred from another hospital. # bool_transfer_status: bool, # sex: int, # [METeOR id: 635126] # [METeOR id: 269986] True if admission occurred on an emergency basis patient_leave_days : float = 0 , Pat_Postcode : str = \"\" , # Format PCNNNN, METeOR id: 429894 Pat_SA2 : int = 0 , # NNNNNNNNN (9 digit), METeOR id: 469909 # Establishment's Remoteness Category EST_Remoteness_Cat : Remoteness_Category_RA16 = Remoteness_Category_RA16 . Unknown , Indigenous_Status : Indigenous_Status_Category = \\ Indigenous_Status_Category . Unknown_or_not_stated , Pat_Radiotherapy_Flag : bool = False , # Set to True if the patient has any of the ACHI 11th Edition codes # listed in Appendices B and C of the `national efficient # price determination 2020-21` document for radiotherapy relevant codes # else False Pat_Dialysis_Flag : bool = False , # Set to True if the patient has any of the ACHI 11th Edition codes # listed in Appendices B and C of the `national efficient # price determination 2020-21` document for dialysis relevant codes # else False # Set to True if the patient is an eligible private patient Pat_private_Flag : bool = False , Pat_Covid19_Flag : bool = False , care_type : Care_Type = Care_Type . acute_care_admitted_care Emergency ABF Parameters required class Emergency_Record : Birth_Date : str , Admission_Date : str , URG_1p4_or_UDG_v1p3 : int , Emergency_Care_Level : str , Pat_Postcode : str = \"\" , # Format PCNNNN, METeOR id: 429894 Pat_SA2 : int = 0 , # NNNNNNNNN (9 digit), METeOR id: 469909 # Establishment's Remoteness Category EST_Remoteness_Cat : Remoteness_Category_RA16 = Remoteness_Category_RA16 . Unknown , Indigenous_Status : Indigenous_Status_Category = \\ Indigenous_Status_Category . Unknown_or_not_stated , Pat_Covid19_Flag : bool = False , care_type : Care_Type = Care_Type . acute_care_admitted_care Non admitted ABF Parameters required class Nonadmitted_Record : Birth_Date : str , Event_Service_Date : str , Tier2_CV5 : str , patient_leave_days : float = 0 , Pat_Postcode : str = \"\" , # Format PCNNNN, METeOR id: 429894 Pat_SA2 : int = 0 , # NNNNNNNNN (9 digit), METeOR id: 469909 # Establishment's Remoteness Category EST_Remoteness_Cat : Remoteness_Category_RA16 = Remoteness_Category_RA16 . Unknown , Indigenous_Status : Indigenous_Status_Category = \\ Indigenous_Status_Category . Unknown_or_not_stated , Multiple_Healthcare_Provider_Indicator : bool = False , # Set to True if the patient is an eligible private patient # Pat_private_Flag: bool = False, Pat_Covid19_Flag : bool = False , care_type : Care_Type = Care_Type . acute_care_admitted_care The four ABF cases above are located under the pipeline submodule as indicated below fastabf \u2514\u2500\u2500 pipelines (the most important module- contains the main pipelines) \u251c\u2500\u2500 nwau_admitted_acute.py \u251c\u2500\u2500 nwau_admitted_sub_and_non_acute.py \u251c\u2500\u2500 nwau_emergency.py \u2514\u2500\u2500 nwau_nonadmitted.py Convenience functions and interfaces As you may observe from the input parameters in the cases above, they use specific classes/data types that were created for convenience. These convenience functions help reduce the need to remember the METeOR parameter values thereby reducing errors and speeding up code development. These user friendly classes and routines can be found at the following locations in the library. Structure of the fastABF library . \u251c\u2500\u2500 datatypes.py (user friendly interfaces to data types used - more info below) \u251c\u2500\u2500 Helpers \u2514\u2500\u2500 charlson_class.py (computes the charlson complexity, if it is not known) \u2514\u2500\u2500 helper_remoteness_mappings.py (computes remoteness categories) The Charlson class helps compute the Charlson complexity in case it is not known apriori. Similarly the remoteness mappings help automatically use the right order of priorities to assign a remoteness category to an episode. Data types The datatypes module contains user friendly mappings to several of the METeOR classes. Instead of having to remember formally designated numbers, you can use these convenient interfaces in your own code. For the details of the possible values for each category, please refer to the specific section on data types. class Sex_Category ( Enum ): class MDC_Type ( Enum ): class ABF_Service_Category ( Enum ): class Remoteness_Category_RA16 ( Enum ): class Hosp_State_Category ( Enum ): class Care_Type_General ( Enum ): # METeOR id: 270174 class Care_Type ( Enum ): # As the original METeOR id: 270174 has class Indigenous_Status_Category ( Enum ): class StayCategory ( Enum ):","title":"Detailed overview"},{"location":"detailedintro/#detailed-overview","text":"This page describes the parameters for the cases that are of primary interest to developers who want to start using fastABF. Note Readers who wish to contribute and extend this library should read this section as well as the section for library developers & contributors.","title":"Detailed overview"},{"location":"detailedintro/#typical-workflow","text":"Normally users would like to calculate the ABF prices for episodes. In fastABF this is easily done by gathering various pieces of data required to invoke the corresponding pipeline for each of the ABF cases. In order to know which pieces of data are required and to construct them easily - here is a simple overview of the inputs for each of the four cases","title":"Typical workflow"},{"location":"detailedintro/#admitted-acute-abf","text":"Parameters required class Admitted_Acute_Record : Birth_Date : str , # ddmmyy Admission_Date : str , # ddmmyy Separation_Date : str , # ddmmyy AR_DRG_v10 : str , # [METeOR id: 269976] True if admitted patient transferred from another hospital. bool_transfer_status : bool , sex : int , # [METeOR id: 635126] # [METeOR id: 269986] True if admission occurred on an emergency basis bool_is_emergency_admission : bool , bool_foetal_distress_flag : bool , bool_instrument_use_flag : bool , bool_ppop_flag : bool , bool_prima_flag : bool , HAC1 : bool , HAC2 : bool , HAC3 : bool , HAC4 : bool , HAC6 : bool , HAC7 : bool , HAC8 : bool , HAC9 : bool , HAC10 : bool , HAC11 : bool , HAC12 : bool , HAC13 : bool , HAC14 : bool , HAC15p2 : bool , Charlson_Score : int , patient_leave_days : float = 0 , ICU_hours_L3 : float = - 1 , ICU_hours_other : float = 0 , Psych_Days : float = 0 , # METeOR id: 552375 Pat_Postcode : str = \"\" , # Format PCNNNN, METeOR id: 429894 Pat_SA2 : int = 0 , # NNNNNNNNN (9 digit), METeOR id: 469909 # Establishment's Remoteness Category EST_Remoteness_Cat : Remoteness_Category_RA16 = Remoteness_Category_RA16 . Unknown , Indigenous_Status : Indigenous_Status_Category = \\ Indigenous_Status_Category . Unknown_or_not_stated , Pat_Radiotherapy_Flag : bool = False , # Set to True if the patient has any of the ACHI 11th Edition codes # listed in Appendices B and C of the `national efficient # price determination 2020-21` document for radiotherapy relevant codes # else False Pat_Dialysis_Flag : bool = False , # Set to True if the patient has any of the ACHI 11th Edition codes # listed in Appendices B and C of the `national efficient # price determination 2020-21` document for dialysis relevant codes # else False # Set to True if the patient is an eligible private patient Pat_private_Flag : bool = False , Pat_Covid19_Flag : bool = False , care_type : Care_Type = Care_Type . acute_care_admitted_care","title":"Admitted acute ABF"},{"location":"detailedintro/#admitted-subacute-abf","text":"Parameters required class Admitted_Subacute_Record : Birth_Date : str , # mmddyy Admission_Date : str , Separation_Date : str , AN_SNAP_v4 : str , # [METeOR id: 269976] True if admitted patient transferred from another hospital. # bool_transfer_status: bool, # sex: int, # [METeOR id: 635126] # [METeOR id: 269986] True if admission occurred on an emergency basis patient_leave_days : float = 0 , Pat_Postcode : str = \"\" , # Format PCNNNN, METeOR id: 429894 Pat_SA2 : int = 0 , # NNNNNNNNN (9 digit), METeOR id: 469909 # Establishment's Remoteness Category EST_Remoteness_Cat : Remoteness_Category_RA16 = Remoteness_Category_RA16 . Unknown , Indigenous_Status : Indigenous_Status_Category = \\ Indigenous_Status_Category . Unknown_or_not_stated , Pat_Radiotherapy_Flag : bool = False , # Set to True if the patient has any of the ACHI 11th Edition codes # listed in Appendices B and C of the `national efficient # price determination 2020-21` document for radiotherapy relevant codes # else False Pat_Dialysis_Flag : bool = False , # Set to True if the patient has any of the ACHI 11th Edition codes # listed in Appendices B and C of the `national efficient # price determination 2020-21` document for dialysis relevant codes # else False # Set to True if the patient is an eligible private patient Pat_private_Flag : bool = False , Pat_Covid19_Flag : bool = False , care_type : Care_Type = Care_Type . acute_care_admitted_care","title":"Admitted subacute ABF"},{"location":"detailedintro/#emergency-abf","text":"Parameters required class Emergency_Record : Birth_Date : str , Admission_Date : str , URG_1p4_or_UDG_v1p3 : int , Emergency_Care_Level : str , Pat_Postcode : str = \"\" , # Format PCNNNN, METeOR id: 429894 Pat_SA2 : int = 0 , # NNNNNNNNN (9 digit), METeOR id: 469909 # Establishment's Remoteness Category EST_Remoteness_Cat : Remoteness_Category_RA16 = Remoteness_Category_RA16 . Unknown , Indigenous_Status : Indigenous_Status_Category = \\ Indigenous_Status_Category . Unknown_or_not_stated , Pat_Covid19_Flag : bool = False , care_type : Care_Type = Care_Type . acute_care_admitted_care","title":"Emergency  ABF"},{"location":"detailedintro/#non-admitted-abf","text":"Parameters required class Nonadmitted_Record : Birth_Date : str , Event_Service_Date : str , Tier2_CV5 : str , patient_leave_days : float = 0 , Pat_Postcode : str = \"\" , # Format PCNNNN, METeOR id: 429894 Pat_SA2 : int = 0 , # NNNNNNNNN (9 digit), METeOR id: 469909 # Establishment's Remoteness Category EST_Remoteness_Cat : Remoteness_Category_RA16 = Remoteness_Category_RA16 . Unknown , Indigenous_Status : Indigenous_Status_Category = \\ Indigenous_Status_Category . Unknown_or_not_stated , Multiple_Healthcare_Provider_Indicator : bool = False , # Set to True if the patient is an eligible private patient # Pat_private_Flag: bool = False, Pat_Covid19_Flag : bool = False , care_type : Care_Type = Care_Type . acute_care_admitted_care The four ABF cases above are located under the pipeline submodule as indicated below fastabf \u2514\u2500\u2500 pipelines (the most important module- contains the main pipelines) \u251c\u2500\u2500 nwau_admitted_acute.py \u251c\u2500\u2500 nwau_admitted_sub_and_non_acute.py \u251c\u2500\u2500 nwau_emergency.py \u2514\u2500\u2500 nwau_nonadmitted.py","title":"Non admitted ABF"},{"location":"detailedintro/#convenience-functions-and-interfaces","text":"As you may observe from the input parameters in the cases above, they use specific classes/data types that were created for convenience. These convenience functions help reduce the need to remember the METeOR parameter values thereby reducing errors and speeding up code development. These user friendly classes and routines can be found at the following locations in the library.","title":"Convenience functions and interfaces"},{"location":"detailedintro/#structure-of-the-fastabf-library","text":". \u251c\u2500\u2500 datatypes.py (user friendly interfaces to data types used - more info below) \u251c\u2500\u2500 Helpers \u2514\u2500\u2500 charlson_class.py (computes the charlson complexity, if it is not known) \u2514\u2500\u2500 helper_remoteness_mappings.py (computes remoteness categories) The Charlson class helps compute the Charlson complexity in case it is not known apriori. Similarly the remoteness mappings help automatically use the right order of priorities to assign a remoteness category to an episode.","title":"Structure of the fastABF library"},{"location":"detailedintro/#data-types","text":"The datatypes module contains user friendly mappings to several of the METeOR classes. Instead of having to remember formally designated numbers, you can use these convenient interfaces in your own code. For the details of the possible values for each category, please refer to the specific section on data types. class Sex_Category ( Enum ): class MDC_Type ( Enum ): class ABF_Service_Category ( Enum ): class Remoteness_Category_RA16 ( Enum ): class Hosp_State_Category ( Enum ): class Care_Type_General ( Enum ): # METeOR id: 270174 class Care_Type ( Enum ): # As the original METeOR id: 270174 has class Indigenous_Status_Category ( Enum ): class StayCategory ( Enum ):","title":"Data types"},{"location":"globalvariables/","text":"Global variables As the fastABF module was created for use by health care providers, there are certain specific variables that do not change from one function call to the other -but which are used in the ABF computations. These are as indicated below Constants fixed for the hospital during setup The following are constants that can be initialised during setup and take their values from the environment. Constant Description Environment variable hosp_state_constant type Hosp_State_Category HOSPITAL_STATE_INT HOSP_PAED_FLAG type bool HOSP_PAED_FLAG hosp_level3ICU_flag type bool HOSP_L3_ICU_FLAG global_NEP type float NEP Warning During initialisation please set the above environmental variables accordingly. They affect the price computations but would not need to be changed very often.","title":"Global variables"},{"location":"globalvariables/#global-variables","text":"As the fastABF module was created for use by health care providers, there are certain specific variables that do not change from one function call to the other -but which are used in the ABF computations. These are as indicated below","title":"Global variables"},{"location":"globalvariables/#constants-fixed-for-the-hospital-during-setup","text":"The following are constants that can be initialised during setup and take their values from the environment. Constant Description Environment variable hosp_state_constant type Hosp_State_Category HOSPITAL_STATE_INT HOSP_PAED_FLAG type bool HOSP_PAED_FLAG hosp_level3ICU_flag type bool HOSP_L3_ICU_FLAG global_NEP type float NEP Warning During initialisation please set the above environmental variables accordingly. They affect the price computations but would not need to be changed very often.","title":"Constants fixed for the hospital during setup"}]}